import java.io.*;
import java.util.Formatter;


/**
 * <p>This program converts the file <a href="http://unicode.org/Public/UNIDATA/UnicodeData.txt">UnicodeData.txt</a> (you should download it to get the latest version) into the file {@code unicode.module} (containing fitting compose definitions for a linux system).</p>
 * 
 * <p>Copyright (C) 2009, 2010 Dennis Heidsiek</p>
 * 
 * <p>This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.</p>
 * 
 * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.</p>
 * 
 * <p>You should have received a copy of the GNU General Public License along with this program; if not, see <a href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/<a>.</p>
 */
public class UnicodeModul {

	/**
	 * Converts the given unicode codepoint to a String only containing the according character.
	 */
	protected static String unicode(int cp) {
		return new String(Character.toChars(cp));
	}
	
	/**
	 * Returns the length of val as string in the given base.
	 * @param val >= 0
	 * @param base > 0
	 */
	protected static int length(int val, int base) {
		return 1 + (int) (Math.log(val) / Math.log(base));
	}
	
	/**
	 * Returns the digits of val in the given base.
	 * @param val >= 0
	 * @param base > 0
	 */
	protected static int[] toBase(int val, int base) {
		if(val==0) return new int[]{0};
		
		int l = length(val, base);
		int[] res = new int[l];
		int pos=l-1;
		do {
			res[pos] = val % base;
			pos--;
			val/=base;
		} while(val>0);
		
		return res;
	}
	
	/**
	 * @param a single filename (standard is UnicodeData.txt)
	 */
	public static void main(String[] args) throws Exception {
		System.out.format("Usage: CreateUnicodeModule [UnicodeData.txt]%nThis program is free software (GNU GPL 3+).%n");
		long nanotime = System.nanoTime();
		
		BufferedReader in = new BufferedReader(new FileReader((args.length == 0) ? "UnicodeData.txt" : args[0]));
		Formatter f = new Formatter(new BufferedWriter(new OutputStreamWriter(new FileOutputStream("unicode.module"), "UTF-8")));
		
		try {
			f.format("#configinfo Alle Unicode-Zeichen, 0-10FFFD (uu17f%s%s)%n", unicode(0x2192), unicode(0x17F));
			f.format("#%n");
			f.format("# Autogenerated list of all unicode codepoints (uu0-uu10FFFD)%n");
			f.format("# File format: Linux-Compose-Definitions%n");
			f.format("# Author: Dennis Heidsiek%n");
			f.format("# Licence (short name): CC-BY-SA 3.0 DE%n");
			f.format("# Licence (full name): Creative Commons Namensnennung-Weitergabe unter gleichen Bedingungen 3.0 Deutschland%n");
			f.format("# Licence-URL: http://creativecommons.org/licenses/by-sa/3.0/de/%n");
			f.format("%n%n");
			
			String line;
			while((line = in.readLine()) != null) {
				String[] l = line.split(";");
				
				int cp = Integer.parseInt(l[0], 16);
				String des = l[1];
				if(des.equals("<control>")) {
					continue;
				}
				
				f.format("<Multi_key> <u> <u>");
				for(int d : toBase(cp, 16)) {
					f.format(" <%c>", d<10 ? ('0'+d) : ('a'+d-10));
				}
				String out = unicode(cp);
				if(out.equals("\"")) out = "\\\"";
				if(out.equals("\\")) out = "\\\\";
				
				f.format(
					" <space> : \"%s\" U%0"+Math.max(4, length(cp,16))+"x # %s%n",
					out, cp, des
					);
			}
		} finally {
			in.close();
			f.close();
			
			// Time
			nanotime = System.nanoTime() - nanotime;
			System.out.format("Program finished. Time elapsed: %s nano seconds. By your command.%n", nanotime);
		}
	}
	
}
